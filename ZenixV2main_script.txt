-- Zenix Hub - Main Executor Script
-- This file should be hosted on GitHub, Rentry, or Pastebin
-- Enhanced with realistic movement and advanced anti-detection

print("Initializing Zenix Hub Main Script...")

-- Safe Rayfield load with fallback
local Rayfield
do
    local ok, result = pcall(function()
        return loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
    end)
    if ok and type(result) == "table" then
        Rayfield = result
    else
        warn("Rayfield UI failed to load; using fallback stub. Reason:", result)
        Rayfield = {}
        function Rayfield:CreateWindow(opts)
            local stubWindow = {}
            function stubWindow:CreateTab(name, id)
                local tab = {}
                function tab:CreateSection(name) end
                function tab:CreateButton(conf) end
                function tab:CreateToggle(conf) end
                function tab:CreateSlider(conf) end
                function tab:CreateLabel(text) end
                return tab
            end
            return stubWindow
        end
        function Rayfield:Notify(opts) warn("Notify:", opts and opts.Title, opts and opts.Content) end
    end
end

-- Services
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualUser = game:GetService("VirtualUser")
local TweenService = game:GetService("TweenService")
local TeleportService = game:GetService("TeleportService")
local player = Players.LocalPlayer
local Workspace = workspace

-- ENHANCED ANTI-KICK SYSTEM
print("Initializing Enhanced Anti-Kick System...")

local Player = game.Players.LocalPlayer
local mt = getrawmetatable(game)
local oldNC = mt.__namecall
setreadonly(mt, false)

mt.__namecall = newcclosure(function(Self, ...)
    local Args = {...}
    local Method = getnamecallmethod()
    
    if Method == "Kick" or Method == "kick" then
        warn("Blocked Kick attempt")
        return nil
    end
    
    if Method == "FireServer" or Method == "fireServer" then
        for _, Arg in ipairs(Args) do
            if type(Arg) == "string" then
                local lower = Arg:lower()
                if lower:find("kick") or lower:find("ban") or lower:find("cheat") or
                   lower:find("moderation") or lower:find("exploit") or lower:find("abnormal") or
                   lower:find("detected") or lower:find("anticheat") then
                    warn("Blocked suspicious FireServer:", Arg)
                    return nil
                end
            end
        end
    end
    
    if Method == "InvokeServer" or Method == "invokeServer" then
        for _, Arg in ipairs(Args) do
            if type(Arg) == "string" then
                local lower = Arg:lower()
                if lower:find("kick") or lower:find("ban") or lower:find("flag") or
                   lower:find("abnormal") or lower:find("detect") then
                    warn("Blocked suspicious InvokeServer:", Arg)
                    return nil
                end
            end
        end
    end
    
    return oldNC(Self, ...)
end)
setreadonly(mt, true)

if hookfunction then
    hookfunction(Player.Kick, function()
        warn("Blocked direct Kick call")
        return nil
    end)
end

if hookmetamethod then
    local oldIndex
    oldIndex = hookmetamethod(game, "__index", function(self, key)
        if key == "Kick" or key == "kick" then
            return function() return nil end
        end
        return oldIndex(self, key)
    end)
end

task.spawn(function()
    while task.wait(1) do
        pcall(function()
            for _, gui in ipairs(player.PlayerGui:GetDescendants()) do
                if gui:IsA("TextLabel") or gui:IsA("TextButton") then
                    local text = (gui.Text or ""):lower()
                    if text:find("kick") or text:find("banned") or text:find("detected") then
                        gui:Destroy()
                        warn("Destroyed kick GUI:", gui.Text)
                    end
                end
            end
        end)
    end
end)

print("Anti-Kick Successfully Initiated")

-- Notification Helper
local function Notify(title, content, duration)
    pcall(function()
        if Rayfield and Rayfield.Notify then
            Rayfield:Notify({
                Title = title or "Zenix Hub",
                Content = content or "",
                Duration = duration or 3
            })
        end
    end)
end

-- Create main window
local Window
local okCreate, createErr = pcall(function()
    Window = Rayfield:CreateWindow({
        Name = "Zenix Hub",
        LoadingTitle = "Zenix Hub",
        LoadingSubtitle = "Powered By JunkieDevelopment",
        Theme = "Default",
        ToggleUIKeybind = "K",
        ConfigurationSaving = { 
            Enabled = true, 
            FolderName = "ZenixHub",
            FileName = "Settings"
        }
    })
end)
if not okCreate then
    warn("Window creation failed:", createErr)
    Window = Window or (Rayfield and Rayfield:CreateWindow({Name = "Fallback"})) or {}
end

-- MAIN TAB
local okMain, mainErr = pcall(function()
    local MainTab = Window:CreateTab("Main", 4483362458)
    MainTab:CreateSection("Script is Free for the Next 24 Hours!")
    MainTab:CreateButton({
    Name = "Tap Me",
    Callback = function()
        Notify("Good Boy", ":‚Å†0", 2)
    end
})
    
    MainTab:CreateSection("Gacha Controls")

    MainTab:CreateButton({
        Name = "Spin 1x",
        Callback = function()
            pcall(function()
                local okRoot = ReplicatedStorage:FindFirstChild("Shared")
                if okRoot and okRoot:FindFirstChild("Remotes") and okRoot.Remotes:FindFirstChild("ShopRemotes") then
                    ReplicatedStorage.Shared.Remotes.ShopRemotes.BuyGacha:FireServer("x1")
                end
            end)
        end
    })

    MainTab:CreateButton({
        Name = "Spin 10x",
        Callback = function()
            pcall(function()
                local okRoot = ReplicatedStorage:FindFirstChild("Shared")
                if okRoot and okRoot:FindFirstChild("Remotes") and okRoot.Remotes:FindFirstChild("ShopRemotes") then
                    ReplicatedStorage.Shared.Remotes.ShopRemotes.BuyGacha:FireServer("x10")
                end
            end)
        end
    })

    getgenv().spinDelay = getgenv().spinDelay or 0.1
    MainTab:CreateSlider({
        Name = "Spin Speed (seconds)",
        Range = {0.05, 1},
        Increment = 0.05,
        Suffix = "s",
        CurrentValue = getgenv().spinDelay,
        Callback = function(Value) getgenv().spinDelay = Value end
    })

    getgenv().autoClickX = getgenv().autoClickX or 5
    getgenv().autoClickY = getgenv().autoClickY or 5
    
    MainTab:CreateSlider({
        Name = "Auto Click X Position",
        Range = {0, 100},
        Increment = 1,
        Suffix = " px",
        CurrentValue = getgenv().autoClickX,
        Callback = function(Value) 
            getgenv().autoClickX = Value 
        end
    })
    
    MainTab:CreateSlider({
        Name = "Auto Click Y Position",
        Range = {0, 100},
        Increment = 1,
        Suffix = " px",
        CurrentValue = getgenv().autoClickY,
        Callback = function(Value) 
            getgenv().autoClickY = Value 
        end
    })
    
    MainTab:CreateToggle({
        Name = "Auto Clicker (Fixed Position)",
        CurrentValue = false,
        Callback = function(Value)
            getgenv().autoclick = Value
            if Value then
                task.spawn(function()
                    while getgenv().autoclick do
                        task.wait(0.1)
                        pcall(function()
                            local fixedPosition = Vector2.new(getgenv().autoClickX, getgenv().autoClickY)
                            local cam = workspace.CurrentCamera
                            if cam then
                                VirtualUser:Button1Down(fixedPosition, cam.CFrame)
                                task.wait(0.01)
                                VirtualUser:Button1Up(fixedPosition, cam.CFrame)
                            end
                        end)
                    end
                end)
            end
        end
    })
    
    MainTab:CreateLabel("Tip: Set position away from UI elements")

    MainTab:CreateToggle({
        Name = "Auto Spin 10x",
        CurrentValue = false,
        Callback = function(Value)
            getgenv().farm10x = Value
            if Value then
                task.spawn(function()
                    while getgenv().farm10x do
                        task.wait(getgenv().spinDelay)
                        pcall(function()
                            local okRoot = ReplicatedStorage:FindFirstChild("Shared")
                            if okRoot and okRoot:FindFirstChild("Remotes") and okRoot.Remotes:FindFirstChild("ShopRemotes") then
                                ReplicatedStorage.Shared.Remotes.ShopRemotes.BuyGacha:FireServer("x10")
                            end
                        end)
                    end
                end)
            end
        end
    })

    MainTab:CreateToggle({
        Name = "Auto Clicker (Corner of Screen)",
        CurrentValue = false,
        Callback = function(Value)
            getgenv().autoclick = Value
            if Value then
                task.spawn(function()
                    while getgenv().autoclick do
                        task.wait(0.1)
                        pcall(function()
                            local corner = Vector2.new(5, 5)
                            VirtualUser:Button1Down(corner, workspace.CurrentCamera.CFrame)
                            VirtualUser:Button1Up(corner, workspace.CurrentCamera.CFrame)
                        end)
                    end
                end)
            end
        end
    })

    MainTab:CreateToggle({
        Name = "Auto Use Yut",
        CurrentValue = false,
        Callback = function(Value)
            getgenv().autoUseYut = Value
            if Value then
                task.spawn(function()
                    while getgenv().autoUseYut do
                        task.wait(0.1)
                        pcall(function()
                            local okShared = ReplicatedStorage:FindFirstChild("Shared")
                            if okShared and okShared:FindFirstChild("Remotes") and okShared.Remotes:FindFirstChild("InventoryRemotes") and okShared.Remotes.InventoryRemotes:FindFirstChild("UseItem") then
                                ReplicatedStorage.Shared.Remotes.InventoryRemotes.UseItem:FireServer("Yut")
                            end
                        end)
                    end
                end)
            end
        end
    })

    MainTab:CreateButton({
        Name = "Auto Enchant (Equip Coin First)",
        Callback = function()
            task.spawn(function()
                pcall(function()
                    local ok, remoteRoot = pcall(function()
                        return ReplicatedStorage:WaitForChild("Shared"):WaitForChild("Remotes"):WaitForChild("EnchantRemotes")
                    end)
                    if not ok or not remoteRoot then
                        Notify("Enchant", "Enchant remotes not found.", 3)
                        return
                    end
                    local startEnchant = remoteRoot:FindFirstChild("StartEnchant")
                    local skipEnchant = remoteRoot:FindFirstChild("SkipEnchant")
                    if not startEnchant or not skipEnchant then
                        Notify("Enchant", "Enchant remotes missing.", 3)
                        return
                    end
                    pcall(function() startEnchant:FireServer() end)
                    task.wait(0.2)
                    local success = false
                    for i = 1, 6 do
                        local s = pcall(function() skipEnchant:FireServer() end)
                        if s then
                            success = true
                            break
                        end
                        task.wait(0.1)
                    end
                    if success then
                        Notify("Enchant", "Enchant attempted.", 2)
                    else
                        Notify("Enchant", "Enchant may have failed.", 3)
                    end
                end)
            end)
        end
    })
end)

Notify("News", "Due to the JunkieDevelopment having some errors. The script is temporarily free for the next 24 Hours", 3)

if not okMain then warn("Main tab creation failed:", mainErr or "unknown") end

-- SPECIAL GACHA TAB
local SpaceTab = Window:CreateTab("Special Gacha", 4483362458)

SpaceTab:CreateSection("Black-hole Coin")
getgenv().spaceGachaDelay = getgenv().spaceGachaDelay or 0.1
SpaceTab:CreateToggle({
    Name = "Auto Black-hole Coin X10",
    CurrentValue = false,
    Callback = function(Value)
        getgenv().spaceAuto10 = Value
        if Value then
            task.spawn(function()
                while getgenv().spaceAuto10 do
                    task.wait(getgenv().spaceGachaDelay)
                    pcall(function()
                        if Workspace:FindFirstChild("Containers") and Workspace.Containers:FindFirstChild("CoinGachaContainer")
                           and Workspace.Containers.CoinGachaContainer:FindFirstChild("SpaceGacha")
                           and Workspace.Containers.CoinGachaContainer.SpaceGacha:FindFirstChild("Trigger") then
                            Workspace.Containers.CoinGachaContainer.SpaceGacha.Trigger:FireServer("x10")
                        end
                    end)
                end
            end)
        end
    end
})
SpaceTab:CreateToggle({
    Name = "Auto Black-hole Coin X1",
    CurrentValue = false,
    Callback = function(Value)
        getgenv().spaceAuto1 = Value
        if Value then
            task.spawn(function()
                while getgenv().spaceAuto1 do
                    task.wait(getgenv().spaceGachaDelay)
                    pcall(function()
                        if Workspace:FindFirstChild("Containers") and Workspace.Containers:FindFirstChild("CoinGachaContainer")
                           and Workspace.Containers.CoinGachaContainer:FindFirstChild("SpaceGacha")
                           and Workspace.Containers.CoinGachaContainer.SpaceGacha:FindFirstChild("Trigger") then
                            Workspace.Containers.CoinGachaContainer.SpaceGacha.Trigger:FireServer("x1")
                        end
                    end)
                end
            end)
        end
    end
})

SpaceTab:CreateSection("ChronoCoin")
getgenv().timeGachaDelay = getgenv().timeGachaDelay or 0.1
SpaceTab:CreateToggle({
    Name = "Auto Chrono Coin X10",
    CurrentValue = false,
    Callback = function(Value)
        getgenv().timeAuto10 = Value
        if Value then
            task.spawn(function()
                while getgenv().timeAuto10 do
                    task.wait(getgenv().timeGachaDelay)
                    pcall(function()
                        if Workspace:FindFirstChild("Containers") and Workspace.Containers:FindFirstChild("CoinGachaContainer")
                           and Workspace.Containers.CoinGachaContainer:FindFirstChild("TimeGacha")
                           and Workspace.Containers.CoinGachaContainer.TimeGacha:FindFirstChild("Trigger") then
                            Workspace.Containers.CoinGachaContainer.TimeGacha.Trigger:FireServer("x10")
                        end
                    end)
                end
            end)
        end
    end
})
SpaceTab:CreateToggle({
    Name = "Auto Chrono Coin X1",
    CurrentValue = false,
    Callback = function(Value)
        getgenv().timeAuto1 = Value
        if Value then
            task.spawn(function()
                while getgenv().timeAuto1 do
                    task.wait(getgenv().timeGachaDelay)
                    pcall(function()
                        if Workspace:FindFirstChild("Containers") and Workspace.Containers:FindFirstChild("CoinGachaContainer")
                           and Workspace.Containers.CoinGachaContainer.TimeGacha:FindFirstChild("Trigger") then
                            Workspace.Containers.CoinGachaContainer.TimeGacha.Trigger:FireServer("x1")
                        end
                    end)
                end
            end)
        end
    end
})

-- HALLOWEEN TAB WITH REALISTIC MOVEMENT
local HalloweenTab = Window:CreateTab("Halloween Event", 3956954037)

-- Persistent settings
getgenv().maxWalkSpeed = getgenv().maxWalkSpeed or 25
getgenv().minDelayPerBucket = getgenv().minDelayPerBucket or 3
getgenv().useWaypoints = getgenv().useWaypoints or true
getgenv().autoTweenActive = getgenv().autoTweenActive or false
getgenv().distanceBasedDelay = getgenv().distanceBasedDelay or true
getgenv().stepSize = getgenv().stepSize or 4
getgenv().stepDelay = getgenv().stepDelay or 0.01

-- Candy Bucket Finder
local function FindAllCandyBuckets()
    local buckets = {}
    
    pcall(function()
        local platform = Workspace:FindFirstChild("Platform")
        if platform then
            local plat = platform:FindFirstChild("Plat") or platform:FindFirstChild("plat")
            if plat then
                for _, obj in ipairs(plat:GetDescendants()) do
                    if obj:IsA("BasePart") or obj:IsA("Model") then
                        local lname = string.lower(obj.Name or "")
                        if lname:find("bucket") or lname:find("candy") or obj.Name == "CandyBucket" then
                            table.insert(buckets, obj)
                        end
                    end
                end
            end
        end
    end)
    
    if getnilinstances and #buckets == 0 then
        pcall(function()
            for _, v in next, getnilinstances() do
                if v.Name == "CandyBucket" and (v:IsA("Model") or v:IsA("BasePart")) then
                    table.insert(buckets, v)
                end
            end
        end)
    end
    
    if #buckets == 0 then
        pcall(function()
            for _, obj in ipairs(Workspace:GetDescendants()) do
                if obj.Name == "CandyBucket" and (obj:IsA("BasePart") or obj:IsA("Model")) then
                    table.insert(buckets, obj)
                end
            end
        end)
    end
    
    return buckets
end

local function GetBucketPosition(bucket)
    if bucket:IsA("BasePart") then
        return bucket.Position
    elseif bucket:IsA("Model") then
        if bucket.PrimaryPart then
            return bucket.PrimaryPart.Position
        else
            local part = bucket:FindFirstChildWhichIsA("BasePart", true)
            if part then
                return part.Position
            end
        end
    end
    return nil
end

-- Realistic Movement System
local function GenerateWaypoints(startPos, endPos, numPoints)
    local waypoints = {}
    local totalDistance = (endPos - startPos).Magnitude
    
    for i = 1, numPoints do
        local t = i / (numPoints + 1)
        local basePos = startPos:Lerp(endPos, t)
        local randomOffset = Vector3.new(
            math.random(-totalDistance * 0.1, totalDistance * 0.1),
            math.random(-2, 2),
            math.random(-totalDistance * 0.1, totalDistance * 0.1)
        )
        table.insert(waypoints, basePos + randomOffset)
    end
    
    return waypoints
end

local function CalculateRealisticDelay(distance)
    if not getgenv().distanceBasedDelay then
        return getgenv().minDelayPerBucket
    end
    
    local travelTime = distance / getgenv().maxWalkSpeed
    local baseDelay = getgenv().minDelayPerBucket
    local variation = (baseDelay + travelTime) * 0.2
    local totalDelay = baseDelay + travelTime + math.random(-variation * 100, variation * 100) / 100
    
    return math.max(totalDelay, baseDelay)
end

local function TweenToPositionRealistic(targetPos, speed)
    local character = player.Character
    if not character then return false end
    
    local hrp = character:FindFirstChild("HumanoidRootPart")
    if not hrp then return false end
    
    local startPos = hrp.Position
    local totalDistance = (targetPos - startPos).Magnitude
    
    local finalOffset = Vector3.new(
        math.random(-3, 3),
        math.random(2, 4),
        math.random(-3, 3)
    )
    local finalPos = targetPos + finalOffset
    
    local positions = {startPos}
    
    if getgenv().useWaypoints and totalDistance > 50 then
        local numWaypoints = math.floor(totalDistance / 50)
        numWaypoints = math.min(numWaypoints, 5)
        
        local waypoints = GenerateWaypoints(startPos, finalPos, numWaypoints)
        for _, wp in ipairs(waypoints) do
            table.insert(positions, wp)
        end
    end
    
    table.insert(positions, finalPos)
    
    for i = 2, #positions do
        if not getgenv().autoTweenActive then return false end
        
        local nextPos = positions[i]
        local segmentDistance = (nextPos - hrp.Position).Magnitude
        
        local speedVariation = speed * 0.15
        local segmentSpeed = speed + math.random(-speedVariation * 10, speedVariation * 10) / 10
        
        local duration = segmentDistance / segmentSpeed
        
        local tweenInfo = TweenInfo.new(
            duration,
            Enum.EasingStyle.Sine,
            Enum.EasingDirection.InOut
        )
        
        local goal = {CFrame = CFrame.new(nextPos)}
        local tween = TweenService:Create(hrp, tweenInfo, goal)
        
        tween:Play()
        tween.Completed:Wait()
        
        if i < #positions then
            task.wait(math.random(1, 3) / 10)
        end
    end
    
    return true
end

local function AutoTweenToBuckets()
    while getgenv().autoTweenActive do
        task.wait(0.5)
        
        local buckets = FindAllCandyBuckets()
        
        if #buckets == 0 then
            Notify("Warning", "No CandyBuckets found!", 3)
            task.wait(5)
        else
            Notify("Found", #buckets .. " bucket(s) detected", 2)
            
            for i, bucket in ipairs(buckets) do
                if not getgenv().autoTweenActive then break end
                
                local pos = GetBucketPosition(bucket)
                
                if pos then
                    local character = player.Character
                    if not character then break end
                    local hrp = character:FindFirstChild("HumanoidRootPart")
                    if not hrp then break end
                    
                    local distance = (pos - hrp.Position).Magnitude
                    local estimatedTime = math.floor(distance / getgenv().maxWalkSpeed)
                    
                    Notify("Walking", string.format("To bucket %d/%d (~%ds)", i, #buckets, estimatedTime), 2)
                    
                    local success = TweenToPositionRealistic(pos, getgenv().maxWalkSpeed)
                    
                    if success then
                        local waitTime = CalculateRealisticDelay(distance)
                        Notify("Arrived", string.format("Waiting %.1fs at bucket %d", waitTime, i), 2)
                        task.wait(waitTime)
                    else
                        Notify("Failed", "Could not reach bucket " .. i, 2)
                        task.wait(2)
                    end
                else
                    warn("Could not get position for bucket:", bucket)
                end
                
                task.wait(math.random(5, 15) / 10)
            end
        end
        
        task.wait(math.random(2, 4))
    end
end

-- Halloween UI
HalloweenTab:CreateSection("Auto Find Candy Bucket (Realistic Movement)")

HalloweenTab:CreateToggle({
    Name = "Auto Farm CandyBuckets",
    CurrentValue = getgenv().autoTweenActive,
    Callback = function(value)
        getgenv().autoTweenActive = value
        if value then
            Notify("Started", "Realistic farming activated!", 2)
            task.spawn(AutoTweenToBuckets)
        else
            Notify("Stopped", "Farming deactivated!", 2)
        end
    end
})

HalloweenTab:CreateSection("Movement Settings")

HalloweenTab:CreateSlider({
    Name = "Walking Speed (studs/sec)",
    Range = {16, 150},
    Increment = 1,
    Suffix = " studs/s",
    CurrentValue = getgenv().maxWalkSpeed,
    Callback = function(value)
        getgenv().maxWalkSpeed = value
        Notify("Speed", "Set to " .. value .. " studs/s", 2)
    end
})

HalloweenTab:CreateSlider({
    Name = "Min. Wait at Each Bucket",
    Range = {1, 10},
    Increment = 0.5,
    Suffix = " seconds",
    CurrentValue = getgenv().minDelayPerBucket,
    Callback = function(value)
        getgenv().minDelayPerBucket = value
    end
})

HalloweenTab:CreateSection("Anti-Detection Features")

HalloweenTab:CreateToggle({
    Name = "Distance-Based Delays",
    CurrentValue = getgenv().distanceBasedDelay,
    Callback = function(value)
        getgenv().distanceBasedDelay = value
        if value then
            Notify("Enabled", "Delays scale with distance", 2)
        else
            Notify("Fixed", "Using fixed delays only", 2)
        end
    end
})

HalloweenTab:CreateToggle({
    Name = "Use Curved Paths (Waypoints)",
    CurrentValue = getgenv().useWaypoints,
    Callback = function(value)
        getgenv().useWaypoints = value
        if value then
            Notify("Enabled", "Using curved, natural paths", 2)
        else
            Notify("Disabled", "Using direct paths", 2)
        end
    end
})

HalloweenTab:CreateLabel("Lower speed = More realistic")
HalloweenTab:CreateLabel("Recommended: 16-25 studs/s")

HalloweenTab:CreateSection("Manual Controls")

HalloweenTab:CreateButton({
    Name = "Scan for CandyBuckets",
    Callback = function()
        local buckets = FindAllCandyBuckets()
        if #buckets > 0 then
            Notify("Found", "Discovered " .. #buckets .. " CandyBucket(s)", 3)
            for i, bucket in ipairs(buckets) do
                print("Bucket " .. i .. ":", bucket:GetFullName())
            end
        else
            Notify("Not Found", "No CandyBuckets detected", 3)
        end
    end
})

HalloweenTab:CreateButton({
    Name = "Walk to Nearest Bucket (Once)",
    Callback = function()
        task.spawn(function()
            local buckets = FindAllCandyBuckets()
            if #buckets == 0 then
                Notify("Error", "No buckets found", 3)
                return
            end
            
            local character = player.Character
            if not character then return end
            local hrp = character:FindFirstChild("HumanoidRootPart")
            if not hrp then return end
            
            local nearest = nil
            local minDist = math.huge
            
            for _, bucket in ipairs(buckets) do
                local pos = GetBucketPosition(bucket)
                if pos then
                    local dist = (pos - hrp.Position).Magnitude
                    if dist < minDist then
                        minDist = dist
                        nearest = pos
                    end
                end
            end
            
            if nearest then
                Notify("Walking", "Moving to nearest bucket...", 2)
                TweenToPositionRealistic(nearest, getgenv().maxWalkSpeed)
            end
        end)
    end
})

HalloweenTab:CreateSection("Auto Use Buckets")

getgenv().autoUseCandy = getgenv().autoUseCandy or false
getgenv().useCandyInterval = getgenv().useCandyInterval or 1.5

HalloweenTab:CreateToggle({
    Name = "Auto Use Buckets",
    CurrentValue = getgenv().autoUseCandy,
    Callback = function(state)
        getgenv().autoUseCandy = state
        if state then
            spawn(function()
                while getgenv().autoUseCandy do
                    task.wait(getgenv().useCandyInterval)
                    pcall(function()
                        local rs = ReplicatedStorage
                        local useRemote = rs:FindFirstChild("Shared") and rs.Shared:FindFirstChild("Remotes") and rs.Shared.Remotes:FindFirstChild("InventoryRemotes") and rs.Shared.Remotes.InventoryRemotes:FindFirstChild("UseItem")
                        if useRemote and useRemote.FireServer then
                            useRemote:FireServer("CandyBucket")
                        end
                    end)
                end
            end)
        end
    end
})

HalloweenTab:CreateSection("Halloween Coins")

getgenv().autoHalloween1x = getgenv().autoHalloween1x or false
getgenv().autoHalloween10x = getgenv().autoHalloween10x or false
getgenv().hcoinInterval = getgenv().hcoinInterval or 1.2

local function fireHalloweenCoin(countStr)
    pcall(function()
        local args = {countStr}
        local cont = workspace:FindFirstChild("Containers")
        if cont then
            local trigger = cont:FindFirstChild("CoinGachaContainer") and cont.CoinGachaContainer:FindFirstChild("HalloweenGacha") and cont.CoinGachaContainer.HalloweenGacha:FindFirstChild("Trigger")
            if trigger and trigger.FireServer then
                trigger:FireServer(unpack(args))
            end
        end
    end)
end

HalloweenTab:CreateToggle({
    Name = "Auto 1x Halloween Coin",
    CurrentValue = getgenv().autoHalloween1x,
    Callback = function(state)
        getgenv().autoHalloween1x = state
        if state then
            spawn(function()
                while getgenv().autoHalloween1x do
                    task.wait(getgenv().hcoinInterval)
                    fireHalloweenCoin("x1")
                end
            end)
        end
    end
})

HalloweenTab:CreateToggle({
    Name = "Auto 10x Halloween Coin",
    CurrentValue = getgenv().autoHalloween10x,
    Callback = function(state)
        getgenv().autoHalloween10x = state
        if state then
            spawn(function()
                while getgenv().autoHalloween10x do
                    task.wait(getgenv().hcoinInterval)
                    fireHalloweenCoin("x10")
                end
            end)
        end
    end
})

HalloweenTab:CreateSlider({
    Name = "Auto Coin Interval (s)",
    Range = {0.5, 5},
    Increment = 0.1,
    Suffix = " s",
    CurrentValue = getgenv().hcoinInterval,
    Callback = function(v) getgenv().hcoinInterval = v end
})

-- UTILITIES TAB
local UtilTab = Window:CreateTab("Utilities", 4483362458)

UtilTab:CreateSection("Server & Anti-AFK")

UtilTab:CreateButton({
    Name = "Rejoin Server",
    Callback = function()
        pcall(function()
            TeleportService:Teleport(game.PlaceId, player)
        end)
    end
})

UtilTab:CreateButton({
    Name = "Server Hop",
    Callback = function()
        Notify("Server Hop", "Finding new server...", 2)
        task.spawn(function()
            local success, err = pcall(function()
                local servers = HttpService:JSONDecode(game:HttpGet(
                    "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"
                ))
                
                if servers and servers.data then
                    local currentServerId = game.JobId
                    for _, server in ipairs(servers.data) do
                        if server.id ~= currentServerId and server.playing < server.maxPlayers then
                            TeleportService:TeleportToPlaceInstance(game.PlaceId, server.id, player)
                            return
                        end
                    end
                end
                
                TeleportService:Teleport(game.PlaceId, player)
            end)
            
            if not success then
                Notify("Error", "Server hop failed", 4)
            end
        end)
    end
})

UtilTab:CreateToggle({
    Name = "Anti-AFK",
    CurrentValue = false,
    Callback = function(val)
        getgenv().antiAfk = val
        if val then
            if not getgenv()._afkConn then
                getgenv()._afkConn = player.Idled:Connect(function()
                    pcall(function()
                        VirtualUser:CaptureController()
                        VirtualUser:ClickButton2(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
                    end)
                end)
            end
            Notify("Anti-AFK", "Enabled", 2)
        else
            if getgenv()._afkConn then
                pcall(function() getgenv()._afkConn:Disconnect() end)
                getgenv()._afkConn = nil
            end
            Notify("Anti-AFK", "Disabled", 2)
        end
    end
})

UtilTab:CreateSection("Warp Map")

UtilTab:CreateButton({
    Name = "Unlock All Warp Map",
    Callback = function()
        task.spawn(function()
            pcall(function()
                local rs = ReplicatedStorage
                local ok, rem = pcall(function()
                    return rs:WaitForChild("Shared", 3)
                              :WaitForChild("Remotes", 3)
                              :WaitForChild("SystemRemotes", 3)
                              :WaitForChild("RegionUnlockSystem", 3)
                end)

                if ok and rem and rem.FireServer then
                    local regions = {
                        "TimeRoom",
                        "SpaceRoom",
                        "EnchantRoom",
                        "CoinShop",
                        "ArtGallery",
                        "RankingBoard"
                    }

                    for _, regionName in ipairs(regions) do
                        pcall(function()
                            rem:FireServer(regionName)
                        end)
                        task.wait(0.2)
                    end

                    Notify("Warp", "Attempted unlock for all regions.", 3)
                else
                    Notify("Warp", "RegionUnlockSystem remote not found.", 4)
                end
            end)
        end)
    end
})

UtilTab:CreateSection("Redeem Codes")

local codesList = {
    "Thxfor7KAP",
    "Thxfor8KAP",
    "Thxfor9KAP",
    "sryforshutdownagain",
    "Seraphim",
    "ThxForActivePlayer3000",
    "ThxForActivePlayer4000",
    "ThxForActivePlayer5000",
    "ThxForActivePlayer6000",
    "ThxForGroup20k",
    "ThxFor10kMembers",
    "ThxFor700AP",
    "ThxFor500Likes",
    "HugeUpdate",
    "EnchantBook",
    "FLIPCOIN",
    "GrimReaper",
    "HalloweenEvent",
    "upcomingpart2",
    "sryforreduce"
}

local function getCodeRemotes()
    local ok, remotes = pcall(function()
        local shared = ReplicatedStorage:FindFirstChild("Shared")
        if not shared then return nil end
        local r = shared:FindFirstChild("Remotes")
        if not r then return nil end
        local codeRemotes = r:FindFirstChild("CodeRemotes")
        if not codeRemotes then return nil end
        return {
            redeem = codeRemotes:FindFirstChild("Redeem"),
            success = codeRemotes:FindFirstChild("Success"),
            fail = codeRemotes:FindFirstChild("Fail")
        }
    end)
    if not ok then return {} end
    return remotes or {}
end

local function findRedeemRemotesFallback()
    local candidates = {}
    pcall(function()
        for _, obj in ipairs(ReplicatedStorage:GetDescendants()) do
            if obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction") then
                local lname = string.lower(obj.Name or "")
                if lname:find("code") or lname:find("redeem") or lname:find("coupon") or lname:find("claim") or lname:find("voucher") then
                    table.insert(candidates, obj)
                end
            end
        end
    end)
    return candidates
end

local pending = {}
local function extractCodeFromArgs(argtbl)
    for _, v in ipairs(argtbl) do
        if type(v) == "string" and pending[v] then
            return v
        end
    end
    for _, v in ipairs(argtbl) do
        if type(v) == "string" then
            return v
        end
    end
    if #argtbl > 0 then
        return tostring(argtbl[1])
    end
    return nil
end

local codeRemotes = getCodeRemotes()
local successRemote = codeRemotes and codeRemotes.success
local failRemote = codeRemotes and codeRemotes.fail
local explicitRedeem = codeRemotes and codeRemotes.redeem

if successRemote and successRemote.OnClientEvent then
    successRemote.OnClientEvent:Connect(function(...)
        local args = {...}
        local code = extractCodeFromArgs(args)
        if not code then return end
        if pending[code] then
            Notify("Redeem", "Redeemed: "..tostring(code), 3)
            pending[code] = nil
        end
    end)
end

if failRemote and failRemote.OnClientEvent then
    failRemote.OnClientEvent:Connect(function(...)
        local args = {...}
        local code = extractCodeFromArgs(args)
        local reason = ""
        for _, v in ipairs(args) do
            if type(v) == "string" and v ~= code then
                reason = tostring(v)
                break
            end
        end
        if not code then return end
        if pending[code] then
            local r = string.lower(reason or "")
            if not (r:find("already") or r:find("redeem") or r:find("claimed") or r:find("used") or r:find("exist")) then
                Notify("Redeem", "Failed: "..tostring(code).." ("..tostring(reason)..")", 3)
            end
            pending[code] = nil
        end
    end)
end

local function safeCallRemote(remote, code)
    if not remote then return false end
    local ok, res = pcall(function()
        if remote:IsA("RemoteFunction") then
            return remote:InvokeServer(code)
        else
            return remote:FireServer(code)
        end
    end)
    return ok, res
end

local function RedeemAllUsingExplicitRemotes()
    Notify("Redeem", "Starting redeem attempts...", 3)

    local candidates = {}
    if explicitRedeem then
        table.insert(candidates, explicitRedeem)
    else
        candidates = findRedeemRemotesFallback()
    end

    if #candidates == 0 then
        Notify("Redeem", "No redeem remote found.", 4)
        return
    end

    for _, code in ipairs(codesList) do
        pending[code] = {sentAt = tick()}
        local called = false
        for _, remote in ipairs(candidates) do
            local ok = safeCallRemote(remote, code)
            if ok then
                called = true
                break
            end
        end
        if not called then
            task.spawn(function(c)
                task.wait(1.2)
                if pending[c] then
                    Notify("Redeem", "Attempted: "..c.." (no response)", 2)
                    pending[c] = nil
                end
            end, code)
        end
        task.wait(0.35)
    end
end

UtilTab:CreateButton({
    Name = "Redeem All Codes",
    Callback = function()
        task.spawn(RedeemAllUsingExplicitRemotes)
    end
})

-- DEBUG TAB
local DebugTab = Window:CreateTab("Debug", 4483362458)

DebugTab:CreateSection("Diagnostics")

DebugTab:CreateButton({
    Name = "Print Workspace Structure",
    Callback = function()
        print("=== WORKSPACE STRUCTURE ===")
        pcall(function()
            local platform = Workspace:FindFirstChild("Platform")
            if platform then
                print("Platform found")
                local plat = platform:FindFirstChild("Plat")
                if plat then
                    print("Plat found")
                    print("Plat children:", #plat:GetChildren())
                    for _, child in ipairs(plat:GetChildren()) do
                        print("  -", child.Name, child.ClassName)
                    end
                else
                    print("Plat not found")
                end
            else
                print("Platform not found")
            end
        end)
        Notify("Console", "Structure printed", 2)
    end
})

DebugTab:CreateButton({
    Name = "Check Nil Instances",
    Callback = function()
        if not getnilinstances then
            Notify("Error", "getnilinstances() not supported", 3)
            return
        end
        
        print("=== NIL INSTANCES CHECK ===")
        local count = 0
        for _, v in next, getnilinstances() do
            if v.Name == "CandyBucket" then
                count = count + 1
                print("Found CandyBucket in nil:", v.ClassName)
            end
        end
        
        if count > 0 then
            Notify("Found", count .. " in nil", 3)
        else
            Notify("None", "No buckets in nil", 3)
        end
    end
})

DebugTab:CreateButton({
    Name = "Test Anti-Kick",
    Callback = function()
        spawn(function()
            wait(1)
            local Success = pcall(function()
                Player:Kick("Test Kick")
            end)
            if Success then
                Notify("Anti-Kick", "Successfully bypassed test kick", 3)
            else
                Notify("Anti-Kick", "Test failed", 3)
            end
        end)
    end
})

DebugTab:CreateSection("System Info")

DebugTab:CreateLabel("Movement: Realistic + Waypoints")
DebugTab:CreateLabel("Anti-Kick: Enhanced Multi-Method")
DebugTab:CreateLabel("Settings: Auto-Save Enabled")
DebugTab:CreateLabel("Executor: " .. (identifyexecutor and identifyexecutor() or "Unknown"))
DebugTab:CreateSection("AutoClicker: Debug Info")
DebugTab:CreateLabel("Top-left corner: X=5, Y=5 (default)")
DebugTab:CreateLabel("Top-right corner: X=95, Y=5")
DebugTab:CreateLabel("Bottom-left corner: X=5, Y=95")
DebugTab:CreateLabel("Middle-left edge: X=5, Y=50")

print("Zenix Hub Successfully Loaded")
print("Enhanced Anti-Kick: ACTIVE")
print("Realistic Movement: READY")
Notify("Zenix Hub", "All systems ready. Use realistic speeds (16-25) for best results!", 4)